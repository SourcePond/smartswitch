#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')

$h1 Quick Overview
SmartSwitch is a simple OSGi service which is able to create service-proxies. Those proxies delegate to a default
service or to an OSGi service when it becomes available. If the OSGi service disappears the smart proxy will delegate
to a default service again. This is useful if you want to have the possibility to replace a default component in your
bundle at any time. For instance suppose, you were using an ExecutorService in your bundle. In most environments, it
uses a default instantiated by your bundle. Now, you have special environment where you want to deploy your bundle,
and, this environment does not allow to create your own ExecutorServices. In this case, you are required to use an
ExecutorService provided by that special environment, but, on all other environments you want to stick with the default.
In such a situation SmartSwitch can help to easily make your bundle work in any circumstance.

$h2 Dependencies
SmartSwitch bundles are available from Maven Central. If you want to use SmartSwitch in your own project, you need to
add following dependency to the POM:

```
<dependency>
    <groupId>ch.sourcepond.commons</groupId>
    <artifactId>smartswitch-api</artifactId>
    <version>${project.version}</version>
</dependency>
```

Additionally, following bundle needs to be installed in your OSGi environment on runtime.

```
<dependency>
	<!-- Only needed on runtime <scope>runtime</scope> -->
    <groupId>ch.sourcepond.commons</groupId>
    <artifactId>smartswitch-impl</artifactId>
    <version>${project.version}</version>
</dependency>
```


Alternatively, there is also a [Karaf](http://karaf.apache.org/) feature available which contains anything needed at
runtime:

```
<dependency>
    <groupId>ch.sourcepond.commons</groupId>
    <artifactId>smartswitch-feature</artifactId>
    <version>${project.version}</version>
</dependency>
```

$h2 Usage
In order to work with SmartSwitch, you need to inject following service to you your bundle:

```
ch.sourcepond.commons.smartswitch.api.SmartSwitchFactory
```

This can be done in any way your OSGi environment may support (plain plumbing, Blueprint, Declarative Services etc.).
After you have injected the service at the appropriate place, you can use its fluent API to specify a smart-switch:

```
import ch.sourcepond.commons.smartswitch.api.SmartSwitchFactory;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;

public class MyComponent {
    private FileSystem fs;
    private ExecutorService executor;

    public MyComponent(SmartSwitchFactory ssf) {
        // Import the file-system if available otherwise use the system default
        fs = ssf.whenService(FileSystem.class).isUnavailableThenUse(() -> FileSystems.getDefault());

        // Import the executor with the filter specified if available. If not, use a cached executor service,
        // and, shut it down if an appropriate OSGi service becomes available.
        executor = ssf.whenService(ExecutorService.class).withFilter("(name=foo.bar)").isUnavailableThenUse(
                        () -> Executors.newCachedThreadPool()).insteadAndExecuteWhenAvailable(ExecutorService::shutdown);
    }

}
```


